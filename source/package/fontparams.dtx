% \iffalse meta-comment
%
% fontparams.dtx
% Copyright 2010, 2011 Philipp Stephani
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2009/09/24 or later.
%
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Philipp Stephani.
% This work consists of all files listed in MANIFEST.
%
% \fi
%
% \iffalse
%<*driver>
\documentclass[a4paper, 10pt]{phst-doc}

\usepackage{fontparams}
\newcommand*{\thispackage}{\textsf{fontparams}\xspace}

\setlength{\overfullrule}{5pt}

\begin{document}

\DocInput{fontparams.dtx}
\PrintChanges
\PrintIndex

\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2010/11/08}{Initial version}
% \changes{v0.2}{2012/09/01}{Switched to \pkg{l3docstrip}}
%
% \GetFileInfo{fontparams.sty}
%
% \title{The \thispackage package\thanks{This document corresponds to
% \thispackage{}~\fileversion, dated~\filedate.}}
% \author{Philipp Stephani \\ \mail{p.stephani2@gmail.com}}
% \date{\filedate}
%
% \appto\normalsize{^^A
%   \setlength\abovedisplayskip{4pt plus 2pt minus 2pt}^^A
%   \setlength\abovedisplayshortskip{0pt plus 2pt}^^A
%   \setlength\belowdisplayskip{4pt plus 2pt minus 2pt}^^A
%   \setlength\belowdisplayshortskip{0pt plus 2pt}^^A
% }
% \normalsize
%
% \maketitle
% \tableofcontents
%
%
% \section{Introduction}
%
% \TeX\ is a fairly flexible typesetting system that can be used with a variety
% of fonts.  This ability requires the access to font-specific quantities,
% which can be divided into two groups: quantities that are specific to each
% character or glyph in the font, and quantities that refer to the font as a
% whole.  For the purpose of this package, the quantities from the latter group
% shall henceforth be called \emph{font parameters}.
%
% This document describes the \LaTeXe\ package \thispackage which provides
% simple read and write access to various of these font parameters.  It assumes
% basic knowledge about the general structure of \TeX-based typesetting
% systems.  A very accessible introduction to terms like “engine” and “format”
% may be found in the document
% \textsf{lualatex-doc.pdf}\footnote{\url{http://mirror.ctan.org/info/luatex/lualatex-doc/lualatex-doc.pdf}}
% by \MPG, which is an interesting read even if you aren’t interested in
% \hologo{LuaLaTeX}.
%
% Unfortunately, the three major general-purpose \TeX\ engines—\hologo{pdfTeX},
% \hologo{XeTeX} and \hologo{LuaTeX}—have different approaches for accessing
% font parameters.  The \thispackage package aims at providing a consistent
% engine-independent interface to font parameters.
%
% At present, the package only focuses on parameters for mathematics
% typesetting.  Because mathematics typesetting is inherently two-dimensional
% and lots of font-specific fine tuning of positions and distances are required
% for quality results, \TeX\ has always had dozens of font parameters only for
% this purpose, which are accessible by virtue of the \cmd{\fontdimen}
% primitive.  But the situation changed dramatically when OpenType math
% typesetting, originally introduced by Microsoft in 2007, would be implemented
% in the \hologo{XeTeX} and \hologo{LuaTeX} engines.  Not only does OpenType
% math increase the number of font parameters a lot, it also requires
% incompatible changes to the interface for accessing the parameters.
%
% One might wonder why aforementioned incompatible changes are necessary at
% all.  There are three reasons for this:
% \begin{itemize}
% \item Original \TeX\ collapses several related font parameters into one.  The
%   most striking example for this is the \emph{default rule width}, which
%   controls not only the width of all horizontal rules known to the engine
%   (fraction bars, over- and underlines, radical rules), but is also employed
%   as a generic vertical distance; OpenType math, on the other hand, knows
%   separate font parameters for all these quantities.
% \item Moreover \TeX\ often uses composite font parameters that are in fact
%   results of calculations including one or more of the basic font parameters.
%   Again, OpenType math has separate parameters for these quantities.
% \item \TeX\ fonts could originally hold a maximum of 128~glyphs, way too few
%   for math typesetting.  Therefore the available glyphs and font parameters
%   are scattered in more than one font.  By contrast, OpenType math fonts have
%   all characters in one single font, which is possible nowadays thanks to
%   Unicode and OpenType.  Since \TeX\ font dimensions are indexed by positive
%   integers and numbered consecutively, overlaps occur in the range of valid
%   font dimension numbers; \ie, the $i$th font dimension of one math font will
%   usually be different from the $i$th font dimension of another font, but
%   both font parameters are required for correct math typesetting.  Because
%   each font dimension must be well-defined, OpenType math fonts cannot
%   provide both dimensions at index~$i$; at least one of them must be shifted
%   to a different position, which already breaks compatbility.
% \end{itemize}
%
% \Hologo{XeTeX} and \hologo{LuaTeX} take different approaches in presenting
% math font parameters to the user.  \Hologo{XeTeX}, sticking to traditional
% \TeX, uses additional font dimensions that can be accessed through the
% \cmd{\fontdimen} primitive; \hologo{LuaTeX}, on the other hand, uses a clean,
% consistent and modern interface based on additional primitives.  The
% \thispackage package follows the \hologo{LuaTeX} way as far as possible.
%
%
% \section{Usage notes}
%
% The \thispackage package should work with a state-of-the art
% \TeX~distribution such as \TeXLive 2010.  It requires \LaTeXe\ and a recent
% version of the \pkg{expl3} bundle\footnote{\url{http://ctan.org/pkg/expl3}}.
% For using the package, only the files \texttt{fontparams.sty} and
% \texttt{fontparams.lua} and the files ending in \texttt{.def} are required.
% The package supports the engines \hologo{pdfTeX}, \hologo{XeTeX} and
% \hologo{LuaTeX}.  The package manual is contained in the file
% \texttt{fontparams.pdf}.  Development versions are hosted on
% GitHub\footnote{\url{https://github.com/phst/fontparams}}.  Please report all
% issues at the issue
% tracker\footnote{\url{https://github.com/phst/fontparams/issues}}.
%
%
% \section{Limitations}
%
% It is important to realize that not only the interfaces, but also the
% capabilities of the engines differ; while \thispackage tries hard to provide
% a consistent interface to the available font parameters, it cannot do magic:
% functionality that the underlying engine doesn’t provide remains unavailable.
% The package is intended to be used mainly as a compatibility layer for
% \emph{querying} font parameter values in a \hologo{LuaTeX}-like manner from
% the less capable engines \hologo{pdfTeX} and \hologo{XeTeX}; \emph{changing}
% parameters may be impossible or yield surprising behavior.  The fewest issues
% are expected with \hologo{LuaTeX}.  To be more specific, notable limitations
% of certain engines include:
% \begin{itemize}
% \item Font parameters that are composite in \hologo{pdfTeX} can be queried,
%   but not set.
% \item Parameters that map to a single \hologo{pdfTeX} font dimension are
%   essentially aliases of each other, and setting one of them changes the
%   others, too, which may result in unexpected changes in typesetting
%   behavior.  For example, setting the overbar rule width will change the
%   distances between numerator and denominator in fraction-like constructs.
% \item Font parameters for things that are handled on the format level in
%   \hologo{pdfTeX}, but are moved to the engine with OpenType math (\eg,
%   radical degrees) are unavailable to \hologo{pdfTeX}.
% \item Most extended font parameters can be changed in all engines, and
%   subsequent queries yield the new value, as expected.  \hologo{XeTeX},
%   however, always uses the values that were active during font loading for
%   typesetting, so setting the extended parameters usually doesn’t change the
%   output.  Inconsistencies may arise if a font parameter is used by both the
%   engine and macro packages: after the parameter has been changed, the engine
%   uses the original value, but macro packages use the new value.
% \item Parameters that cannot be accessed through font dimensions in
%   \hologo{XeTeX} are not available when compiling with that engine.
% \item Parameters which are not dimensions (\eg,
%   \cmd{\Umathradicaldegreeraise}) cannot be set in \hologo{XeTeX} using the
%   \hologo{LuaTeX} syntax.
% \item Parameter assignments using the \hologo{LuaTeX} syntax obey grouping in
%   \hologo{LuaTeX}, but not in the other engines.
% \item \Hologo{XeTeX} uses different conventions depending on whether the
%   selected font is an OpenType or a traditional TFM-based font.  You have to
%   tell the \thispackage package explicitly which type of fonts you use.
% \item Parameters that have no \hologo{LuaTeX} primitive assigned to them are
%   not available in \hologo{LuaTeX}.
% \item Some of the parameters that didn’t exist in \hologo{pdfTeX} are
%   assigned garbage values in \hologo{LuaTeX} when non-Open Type fonts are
%   selected.
% \end{itemize}
%
% In general, querying font parameters should work in almost all cases, while
% setting them often depends on engine specifics that cannot be abstracted
% away, or on circumstances that are outside the control of the \thispackage
% package.  The package provides a thin wrapper around the engine-speficic
% low-level interfaces, but cannot guarantee to behave as expected.
%
%
% \section{Interface}
%
% Load the \thispackage package with the standard \LaTeXe\ commands:
%\begin{verbatim}
%\usepackage{fontparams}
%\end{verbatim}
% or (in package or class files):
%\begin{verbatim}
%\RequirePackage{fontparams}
%\end{verbatim}
% The package does not accept any options.
%
% The following documentation of the package interface is split in two parts:
% \autoref{sec:informal} contains informal descriptions for users that don’t
% want to be bothered with \TeX\ grammar terms; \autoref{sec:rigorous}
% rigorously defines the public interface of the package, and forms its
% normative description.
%
%
% \subsection{Informal description}
% \label{sec:informal}
%
% Font parameters are either integers or lengths; the font parameter
% expressions described below may be used wherever \LaTeX\ expects an
% expression of the respective type.  Examples for integer expressions are
% \texttt{351} or \cmd{\value}\marg{counter}; examples for length expressions
% are \texttt{27.4pt} or \cmd{\linewidth}.  In \autoref{sec:list}, integer
% parameters are denoted by \enquote{Type:~\term{number}}, and length
% parameters are denoted by \enquote{Type:~\term{dimen}}.
%
% There are two established naming schemes for font parameters: the names
% described in the official documentation for the mathematical features of
% OpenType fonts as defined by Microsoft; and the primitives that
% \hologo{LuaTeX} provides.  Rather than trying to establish a new interface,
% \thispackage package tries its best to bring support for both naming schemes
% to all supported engines.
%
% Naturally, font parameters are bound to a certain font.  However, it is more
% common to ask for the current value of a mathematical font parameter
% belonging to a font that is uses to typeset a certain \emph{mathematical
% style}.  Therefore the \thispackage package also supports querying and
% setting mathematical font parameters according to a given mathematical style.
%
% \TeX\ knows eight mathematical styles, which are assigned pairwise to the
% four different mathematical expression sizes that are selected by context or
% explicit user choice.  These four sizes are used to typeset expressions in
% displayed equations, inline equations, top-level subscripts and superscripts,
% and second-level subscripts and superscripts, respectively.  The characters
% of the display and text styles don’t differ by size, but two-dimensional
% objects such as fractions are typeset differently:
% \begin{equation*}
%   \dfrac12 \text{ (display style)} \qquad \text{vs.} \qquad
%   \tfrac12 \text{ (text style).}
% \end{equation*}
% Text, top-level script, and second-level script styles are collectively
% denoted by the name \emph{non-display styles}.
%
% To each of these sizes belong two mathematical styles: \emph{non-cramped} and
% \emph{cramped}.  The non-cramped styles are generally used terms outside
% two-dimensional constructs and fraction numerators; whereas the cramped
% styles distinguish themselves by their superscripts being typeset at a lower
% vertical position and are used for fraction denominators, radicands, and
% similar constructs where space at the top is not unlimited.
%
% \DescribeMacros{\displaystyle \textstyle \scriptstyle \scriptscriptstyle
% \crampeddisplaystyle \crampedtextstyle \crampedscriptstyle
% \crampedscriptscriptstyle}
% The correct mathematical style is usually chosen automatically, but can also
% be specified by the user via low-level switch commands.  \TeX\ has only
% switches for the non-cramped styles: \cmd{\displaystyle}, \cmd{\textstyle},
% \cmd{\scriptstyle}, and \cmd{\scriptscriptstyle}; but \hologo{LuaTeX}
% introduces commands for the cramped styles as well:
% \cmd{\crampeddisplaystyle}, \cmd{\crampedtextstyle},
% \cmd{\crampedscriptstyle}, and \cmd{\crampedscriptscriptstyle}.  The
% \thispackage package uses these command names to distiguish between
% mathematical styles where necessary.  The commands for the cramped styles are
% made available for \hologo{XeTeX} and \hologo{pdfTeX} as well, but only for
% the purpose of the \thispackage package; you should never use them for other
% purposes.
%
% \DescribeMacro{\FontParameter}
% The command \cmd{\FontParameter}\marg{name}\marg{font} queries the font
% represented by \meta{font} for the parameter with the OpenType name
% \meta{name}.  The \meta{font} must be a valid font identifier, \eg, |\font|
% for the current font, |\textfont 2| for the text-style font in the
% mathematical group~2, or a font command declared by the \LaTeXe\ command
% \cmd{\DeclareFixedFont}.  Depending on the type of the parameter, it can be
% used wherever \LaTeX\ expects an integer or a length variable.  For printing
% a parameter value, prefix the \cmd{\FontParameter} command by \cmd{\the}.  As
% an example, if \Robertson’s \pkg{fontspec} package is loaded, the following
% code snipped prints the width of the fraction bar defined in the font
% \fnt{Cambria Math}:
%\begin{verbatim}
%\fontspec{Cambria Math}
%\the\FontParameter{FractionRuleThickness}{\font}
%\end{verbatim}
% This command only works if the parameter name is listed in
% \autoref{sec:list}, and if the parameter is readable in the running engine.
%
% \DescribeMacro{\SetFontParameter}
% The command \cmd{\SetFontParameter}\marg{name}\marg{font}\marg{value} sets
% the font parameter with the OpenType name \meta{name} in the font \meta{font}
% to the new value \meta{value}.  The type of the \meta{value} must correspond
% to the type of the parameter.  This command only works if the parameter name
% is listed in \autoref{sec:list}, and if the parameter is writable in the
% running engine.
%
% \DescribeMacro{\FontParameterByStyle}
% The command \cmd{\FontParameterByStyle}\marg{name}\marg{style} queries the
% font currently selected for the mathematical style represented by
% \meta{style} for the fonr parameter with the OpenType name \meta{name}.
% \meta{style} must be one of the style switches discussed above; otherwise,
% the command behaves identical to the \cmd{\FontParameter} command.  For
% example, if \Robertson’s \pkg{unicode-math} package has been loaded, the
% following code snippets prints the vertical shift of superscripts for the
% non-cramped and cramped display styles:
%\begin{verbatim}
%\setmathfont{Cambria Math}
%$x$
%\the\FontParameterByStyle{SuperscriptShiftUp}{\displaystyle}\quad
%\the\FontParameterByStyle{SuperscriptShiftUp}{\crampeddisplaystyle}
%\end{verbatim}
% Note that the values are only correct after some mathematical expression has
% been typeset because \LaTeXe\ initializes mathematical fonts only when
% needed.  If you run this snippet, you should find that the vertical shift is
% smaller for the cramped style.
%
% \DescribeMacro{\SetFontParameterByStyle}
% Likewise, a font parameter corresponding to a certain style can be set using
% the command
% \cmd{\SetFontParameterByStyle}\marg{name}\marg{style}\marg{value}.
%
% \DescribeMacros{\ActivateOpenTypeFontParameters
% \ActivateLegacyFontParameters}
% If and only if \hologo{XeTeX} is the current engine, the two parameterless
% commands \cmd{\ActivateOpenTypeFontParameters} and
% \cmd{\ActivateLegacyFontParameters} are defined.  They select the apropriate
% definitions for OpenType fonts with a mathematical font parameter table and
% other fonts.  Directly after the \thispackage package is loaded, the legacy
% definitions are activated, but if you load an OpenType mathematical font
% (\eg, by using \cmd{\setmathfont} from \Robertson’s \pkg{unicode-math}
% package), you need to inform \hologo{XeTeX} explicitly about this fact via
% \cmd{\ActivateOpenTypeFontParameters}.  The two commands may be used any
% number of times.  \Hologo{LuaTeX} supports these two kinds of fonts, too, but
% it unifies access to font parameters already at the engine level, so no
% manual switching is required.
%
%
% \subsection{Rigorous definition}
% \label{sec:rigorous}
%
% The following discussions use the term \enquote{undefined behavior} in the
% same sense as the C~standard does.  Furthermore, every behavior within the
% scope of the \thispackage package that is not explicitly defined is taken to
% be undefined.  Notions in \textcolor{term}{green} refer to nonterminal
% symbols from the \hologo{TeX} grammar, as described in the \TeX book, the
% \eTeX\ manual, and the manuals of the supported engines.  Expansion is only
% performed if explicitly noted; for example, if a \term{font} is expected, a
% token list that does not conform to the definition of \term{font} would be
% invalid even if its expansion conformed to that definition, unless stated
% otherwise.
%
% \DescribeMacros{\crampeddisplaystyle \crampedtextstyle \crampedscriptstyle
% \crampedscriptscriptstyle}
% \emph{\Hologo{pdfTeX} and \hologo{XeTeX} only:} The control sequences
% \cmd{\crampeddisplaystyle}, \cmd{\crampedtextstyle},
% \cmd{\crampedscriptstyle}, and \cmd{\crampedscriptscriptstyle} are defined as
% opaque entities distinct from all other control sequences.  They are intended
% to be used as a \meta{style token} (described below), but any other use
% (including, but not limited to, expanding, writing to a file or the terminal,
% and typesetting) results in undefined behavior.  In particular, they cannot
% be used to switch to a particular mathematical style.
%
% \DescribeNonterminal{font argument}
% For convenience, we define \meta{font argument} as follows:
% \begin{equation*}
%   \meta{font argument} \Coloneqq
%   \term{left brace} \term{font} \term{right brace}
%   \mid \cmd{\font} \mid \term{fontdef token}.
% \end{equation*}
%
% \DescribeNonterminal{style token}
% For \hologo{LuaTeX}, a \meta{style token} is defined as a control sequence
% token whose meaning is equal to one of the style-switching primitives
% \cmd{\displaystyle}, \cmd{\crampeddisplay\-style}, \cmd{\textstyle},
% \cmd{\crampedtextstyle}, \cmd{\scriptstyle}, \cmd{\crampedscriptstyle},
% \cmd{\scriptscriptstyle}, and \cmd{\crampedscriptscriptstyle}.  For
% \hologo{XeTeX} and \hologo{pdfTeX}, a \meta{style token} is a token whose
% meaning is equal to one of the style-switching primitives
% \cmd{\displaystyle}, \cmd{\textstyle}, \cmd{\scriptstyle}, and
% \cmd{\scriptscriptstyle}, or one of the tokens \cmd{\crampeddisplaystyle},
% \cmd{\crampedtextstyle}, \cmd{\crampedscript\-style}, and
% \cmd{\crampedscriptscriptstyle} descibed above.
% \DescribeNonterminal{style token argument}
% For convenience, we define \meta{style token argument} as follows:
% \begin{equation*}
%   \meta{style token argument} \Coloneqq
%   \term{left brace} \meta{style token} \term{right brace}
%   \mid \meta{style token}.
% \end{equation*}
%
% \DescribeNonterminal{OpenType name}
% An \meta{OpenType name} is defined as a \term{balanced text} whose total
% expansion shall consist of one or more character tokens of category~11 or~12;
% if the total expansion is empty or contains other kinds of tokens (\eg,
% control sequence tokens or character tokens of categories other than~11
% or~12), the behavior is undefined.  The resulting list of character tokens
% interpreted as a string shall be equal to one of the OpenType names listed in
% autoref{sec:list}; otherwise an error message is issued by commands that try
% to interpret the token list as an OpenType parameter name.
% \DescribeNonterminal{OpenType name argument}
% For convenience, we define \meta{OpenType name argument} as follows:
% \begin{equation*}
%   \meta{OpenType name argument} \Coloneqq
%   \term{left brace}\meta{OpenType name}\term{right brace}.
% \end{equation*}
%
% \DescribeNonterminal{\hologo{LuaTeX} primitive}
% A \meta{\hologo{LuaTeX} primitive} is defined as a control sequence token
% whose meaning is equal to one of the \hologo{LuaTeX} primitive tokens listed
% in \autoref{sec:list}.  Only in \hologo{LuaTeX} these tokens are truly
% primitive control sequences; in the other engines, they are defined as
% protected macros.
%
% A parameter represented by either an \meta{OpenType name} or a
% \meta{\hologo{LuaTeX} primitive} is called \emph{readable} if the
% currently-running engine is mentioned in the item \enquote{Read access in} of
% the parameter in \autoref{sec:list}.  Likewise, a parameter is called
% \emph{writable} if the currently-running engine is mentioned in the item
% \enquote{Write access in} of the parameter in \autoref{sec:list}.
%
% \DescribeMacro{\FontParameter}
% \cmd{\FontParameter} is a protected macro that shall be used in the form
% \begin{equation*}
%   \cmd{\FontParameter}
%   \meta{OpenType name argument}
%   \meta{font argument}.
% \end{equation*}
% The first argument shall be a valid \meta{OpenType name argument}.  If the
% corresponding font parameter is not readable, an error message is issued.  If
% the parameter represented by the \meta{OpenType name argument} is not defined
% in the font represented by the \meta{font argument}, the behavior is
% undefined.  Otherwise, the aforementioned construct expands after an
% undefined number of expansion steps to a token list conforming to the
% definition of \term{internal integer} if the type of the parameter is
% \term{number}, or to a token list conforming to the definition of
% \term{internal dimen} if the type of the parameter is \term{dimen}.  The
% numeric value of the resulting quantity is the value of the parameter
% represented by the \meta{OpenType name argument} in the font represented by
% the \meta{font argument}.
%
% \DescribeMacro{\SetFontParameter}
% \cmd{\SetFontParameter} is a protected macro that shall be used in the form
% \begin{multline*}
%   \cmd{\SetFontParameter} \\
%   \meta{OpenType name argument}
%   \meta{font argument}
%   \meta{expression argument}.
% \end{multline*}
% The first argument shall be a valid \meta{OpenType name argument}.  If the
% corresponding font parameter is not writable, an error message is issued.  If
% the parameter represented by the \meta{OpenType name argument} cannot be set
% in the font represented by the \meta{font argument}, the behavior is
% undefined.  If the type of the parameter represented by the \meta{OpenType
% name argument} is \term{number}, the total expansion of the third argument
% shall conform to the definition of \term{integer expr}, otherwise the
% behavior is undefined; if the type is \term{dimen}, it shall conform to the
% definition of \term{dimen expr}, otherwise the behavior is undefined.  If the
% behavior is defined and not errorneous, execution of the aforementioned
% construct leads to the font parameter represented by the \meta{OpenType name
% argument} in the font represented by the \meta{font argument} being changed
% to the numeric value of the expression \meta{expression argument}.  The
% expansion of the construct is undefined.
%
% \DescribeMacro{\FontParameterByStyle}
% \cmd{\FontParameterByStyle} is a protected macro that shall be used in the
% form
% \begin{equation*}
%   \cmd{\FontParameterByStyle}
%   \meta{OpenType name argument}
%   \meta{style argument}.
% \end{equation*}
% The first argument shall be a valid \meta{OpenType name argument}.  If the
% corresponding font parameter is not readable, an error message is issued.  If
% the parameter represented by the \meta{OpenType name argument} is not defined
% in the mathematical style represented by the \meta{style argument}, the
% behavior is undefined.  Otherwise, the aforementioned construct expands after
% an undefined number of expansion steps to a token list conforming to the
% definition of \term{internal integer} if the type of the parameter is
% \term{number}, or to a token list conforming to the definition of
% \term{internal dimen} if the type of the parameter is \term{dimen}.  The
% numeric value of the resulting quantity is the value of the parameter
% represented by the \meta{OpenType name argument} in the mathematical style
% represented by the \meta{style argument}.
%
% \DescribeMacro{\SetFontParameterByStyle}
% \cmd{\SetFontParameterByStyle} is a protected macro that shall be used in the
% form
% \begin{multline*}
%   \cmd{\SetFontParameterByStyle} \\
%   \meta{OpenType name argument}
%   \meta{style argument}
%   \meta{expression argument}.
% \end{multline*}
% The first argument shall be a valid \meta{OpenType name argument}.  If the
% corresponding font parameter is not writable, an error message is issued.  If
% the parameter represented by the \meta{OpenType name argument} cannot be set
% for the mathematical style represented by the \meta{style argument}, the
% behavior is undefined.  If the type of the parameter represented by the
% \meta{OpenType name argument} is \term{number}, the total expansion of the
% third argument shall conform to the definition of \term{integer expr},
% otherwise the behavior is undefined; if the type is \term{dimen}, it shall
% conform to the definition of \term{dimen expr}, otherwise the behavior is
% undefined.  If the behavior is defined and not errorneous, execution of the
% aforementioned construct leads to the font parameter represented by the
% \meta{OpenType name argument} for the mathematical style represented by the
% \meta{style argument} being changed to the numeric value of the expression
% \meta{expression argument}.  The expansion of the construct is undefined.
%
% Constructs of the form
% \begin{equation*}
%   \meta{\hologo{LuaTeX} primitive}
%   \meta{style token}
% \end{equation*}
% are defined if and only if the font parameter denoted by the
% \meta{\hologo{LuaTeX} primitive} is readable, and the parameter is defined
% for the mathematical style represented by the \meta{style token}.  Then the
% construct expands after an undefined number of expansion steps to a token
% list conforming to the definition of \term{internal integer} if the type of
% the parameter is \term{number}, or to a token list conforming to the
% definition of \term{internal dimen} if the type of the parameter is
% \term{dimen}.  The numeric value of the resulting quantity is the value of
% the parameter represented by the \meta{\hologo{LuaTeX} primitive} in the
% mathematical style represented by the \meta{style token}.
%
% Constructs of the form
% \begin{equation*}
%   \meta{\hologo{LuaTeX} primitive}
%   \meta{style token}
%   \term{equals}
%   \meta{value}
% \end{equation*}
% are defined if and only if the font parameter denoted by the
% \meta{\hologo{LuaTeX} primitive} is writable, and the parameter can be set
% for the mathematical style represented by the \meta{style token}, and the
% total expansion of the \meta{value} conforms to the definition of the term
% (\term{number} or \term{dimen}) that defines the type of the parameter
% represented by the \meta{\hologo{LuaTeX} primitive}.  Then execution of the
% construct leads to the font parameter represented by the
% \meta{\hologo{LuaTeX} primitive} for the mathematical style represented by
% the \meta{style token} being changed to the numeric value of the expression
% \meta{value}.  The expansion of the construct is undefined.
%
% \DescribeMacros{\ActivateOpenTypeFontParameters
% \ActivateLegacyFontParameters}
% \cmd{\ActivateOpenTypeFontParameters} and \cmd{\ActivateLegacyFontParameters}
% are protected macros with undefined expansion behavior which when executed
% load the definitions for OpenType fonts with a \texttt{MATH} table and other
% types of fonts, respectively.  They are defined if and only if \hologo{XeTeX}
% is running.
%
%
% \section{Available font parameters}
% \label{sec:list}
%
% \NewDocumentCommand{\FontparamDesc}{mmmmmmm}{
% \item
%   OpenType name: #1 #3 \\
%   \Hologo{LuaTeX} primitive: #2 \\
%   Type: \term{#4} \\
%   Read access in: #5 \\
%   Write access in: #6 \\
%   Description: #7
% }
%
% \begin{itemize}
% \input{fontparams-desc.tex}
% \end{itemize}
%
%
% \StopEventually{}
%
%
% \section{Technical notes}
%
% Descriptions, formulas, and \TeX\ mappings for the font parameters are
% collected in the Lua file \texttt{fontparams-data.lua}.  Several Lua scripts
% transform this data file into appropriate \TeX\ definition files.  These
% compilation scripts require only a standard Lua~5.1 interpreter (\eg, the
% stock Lua interpreter or \hologo{LuaTeX}); no extension modules are needed.
%
%
% \section{Implementation of the \LaTeXe\ package}
%
% \subsection{Initialization}
%
% We start by loading the \LaTeX3 packages and identifying ourselves.
%    \begin{macrocode}
%<*package>
%<@@=fontparams>
\NeedsTeXFormat{LaTeX2e}[2009/09/24]
\RequirePackage{expl3}[2012/08/14]
\ProvidesExplPackage{fontparams}{2012/09/01}{0.2}%
  {Unified font parameter access}
%    \end{macrocode}
%
% \subsection{Messages}
%
% \begin{l3message}{unknown-style}
%   This message is issued when an unknown mathematical style is queried.  The
%   only argument should be the stringized name of the requested style token.
%    \begin{macrocode}
\msg_new:nnnn { fontparams } { unknown-style } {
  Unknown~ mathematical~ style~ #1
} {
  Use~ one~ of:~
  \exp_not:n {
    \displaystyle,~ \crampeddisplaystyle,~
    \textstyle,~ \crampedtextstyle,~
    \scriptstyle,~ \crampedscriptstyle,~
    \scriptscriptstyle,~ \crampedscriptscriptstyle
  }
}
%    \end{macrocode}
% \end{l3message}
%
% \begin{l3message}{unknown-param}
%   This message is issued when an unknown parameter is queried.  The only
%   argument should be the OpenType name of the parameter.
%    \begin{macrocode}
\msg_new:nnn { fontparams } { unknown-param } {
  Unknown~ font~ parameter~ #1
}
%    \end{macrocode}
% \end{l3message}
%
% \begin{l3message}{readonly-param}
%   This message is issued when tries to set a parameter which is read-only for
%   the current engine.  The only argument should be the OpenType name of the
%   parameter.
%    \begin{macrocode}
\msg_new:nnn { fontparams } { readonly-param } {
  Font~ parameter~ #1~ is~ read-only
}
%    \end{macrocode}
% \end{l3message}
%
% \begin{l3message}{primitive-exists}
%   This message is issued when a \hologo{LuaTeX} primitive is already defined
%   prior to loading the package.  The only argument should be the stringized
%   name of the primitive token.
%    \begin{macrocode}
\msg_new:nnn { fontparams } { primitive-exists } {
  The~ command~ #1~ already~ exists~ and \\
  will~ be~ overwritten
}
%    \end{macrocode}
% \end{l3message}
%
% \subsection{Common definitions}
%
% \begin{macro}{\l_@@_tmp_tl}
%   A scratch token list.
%    \begin{macrocode}
\tl_new:N \l_@@_tmp_tl
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l_@@_stack_seq}
%   The sequence variable |\l_@@_stack_seq| represents a stack containing the
%   active syntax modes.
%    \begin{macrocode}
\seq_new:N \l_@@_stack_seq
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_input:n}
%   The macro \cmd{\@@_input:n}\marg{file name} saves the current category code
%   regime on the stack, switches to default \LaTeXe\ category codes, and
%   inputs the file specified by the \meta{file name}.
%   \changes{v0.2}{2012/09/01}{\Hologo{LaTeX3} kernel doesn't provide
%   \cs{ExplSyntaxStack} any more}
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_input:n #1 {
  \seq_push:NV \l_@@_stack_seq \l__kernel_expl_bool
  \ExplSyntaxOff
  \file_input:n { #1 }
  \seq_pop:NNTF \l_@@_stack_seq \l_@@_tmp_tl {
    \bool_set:Nn \l__kernel_expl_bool { \l_@@_tmp_tl }
  } {
    \ExplSyntaxOff
  }
}
%    \end{macrocode}
% \end{macro}
%
% Now we load the auto-generated file of common definitions.
%    \begin{macrocode}
\@@_input:n { fontparams.def }
%    \end{macrocode}
%
% \subsection{\Hologo{LuaTeX} definitions}
%
% If \hologo{LuaTeX} is running, we load the accompanying Lua module.
%    \begin{macrocode}
\luatex_if_engine:TF {
  \RequirePackage { luatexbase } [ 2010/05/27 ]
  \RequireLuaModule { fontparams } [ 2010/12/21 ]
%    \end{macrocode}
%
% \begin{macro}{\@@_undefine:N}
%   The macro \cmd{\@@_undefine:N}\marg{control sequence} warns if the
%   \term{control sequence} is already defined and then undefines it.
%    \begin{macrocode}
  \cs_new_protected_nopar:Npn \@@_undefine:N #1 {
    \cs_if_exist:NT #1 {
      \msg_warning:nnx { fontparams } { primitive-exists }
        { \token_to_str:N #1 }
    }
%    \end{macrocode}
% \cmd{\cs_if_exists:N} treats control sequences equal to \cmd{\relax} as
% undefined, but |tex.enableprimitives| does not.  So we always explicitly
% undefine the control sequence.
%    \begin{macrocode}
    \cs_undefine:N #1
  }
%    \end{macrocode}
% \end{macro}
%
% Finally we load the \hologo{TeX} definitions and enable the additional
% primitives.  The primitives will always be enabled because the definition
% file undefines all of them.
% \changes{v0.2}{2012/09/01}{Meaning of \cs{lua_now:x} changed in
% \hologo{LaTeX3} kernel}
%    \begin{macrocode}
  \@@_input:n { fontparams-luatex.def }
  \lua_now:n { fontparams.activate_primitives() }
%    \end{macrocode}
%
% \subsection{Legacy definitions}
%
% First we load the file that contains the definitions common to \hologo{XeTeX}
% and \hologo{pdfTeX}.
%    \begin{macrocode}
} {
  \@@_input:n { fontparams-legacy.def }
%    \end{macrocode}
%
% \begin{macro}{\crampeddisplaystyle}
% \begin{macro}{\crampedtextstyle}
% \begin{macro}{\crampedscriptstyle}
% \begin{macro}{\crampedscriptscriptstyle}
%   The cramped style tokens must be available for the interface commands, but
%   should generate an error when being expanded or typeset.  We just use
%   quarks here.
%    \begin{macrocode}
  \quark_new:N \crampeddisplaystyle
  \quark_new:N \crampedtextstyle
  \quark_new:N \crampedscriptstyle
  \quark_new:N \crampedscriptscriptstyle
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_abs:n}
%   The macro \cmd{\@@_abs:n}\marg{dimen} expands to another \term{dimen} which
%   is the absolute value of the passed \term{dimen}.
%    \begin{macrocode}
  \cs_new_protected_nopar:Npn \@@_abs:n #1 {
    \dimexpr
    \dim_compare:nNnT { #1 } < { \c_zero_dim } { - }
    \dimexpr #1 \relax
    \relax
  }
%    \end{macrocode}
% \end{macro}
%
% We load the \hologo{pdfTeX} definitions for both \hologo{pdfTeX} and
% \hologo{XeTeX} so that legacy fonts use the correct definitions in
% \hologo{XeTeX}.
%    \begin{macrocode}
  \@@_input:n { fontparams-pdftex.def }
%    \end{macrocode}
%
% \begin{macro}{\@@_load_xetex_def:}
% \begin{macro}{\@@_load_pdftex_def:}
%   For \hologo{XeTeX} only we create two macros to switch between the
%   definitions.
%    \begin{macrocode}
  \xetex_if_engine:T {
    \cs_new_protected_nopar:Npn \@@_load_xetex_def: {
      \@@_input:n { fontparams-xetex.def }
    }
    \cs_new_protected_nopar:Npn \@@_load_pdftex_def: {
      \@@_input:n { fontparams-pdftex.def }
    }
  }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{User interface}
%
% \begin{macro}{\ActivateOpenTypeFontParameters}
% \begin{macro}{\ActivateLegacyFontParameters}
%   If \hologo{XeTeX} is the current engine, we define commands to load the
%   OpenType or legacy font parameter definitions.
%    \begin{macrocode}
\xetex_if_engine:T {
  \cs_new_protected_nopar:Npn \ActivateOpenTypeFontParameters {
    \@@_load_xetex_def:
  }
  \cs_new_protected_nopar:Npn \ActivateLegacyFontParameters {
    \@@_load_pdftex_def:
  }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\FontParameter}
%   \cmd{\FontParameter}\marg{name}\marg{font} expands to a \term{number} or a
%   \term{dimen} which contains the value of the font parameter identified by
%   \meta{name} in the \term{font}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \FontParameter #1 #2 {
  \cs_if_exist:cTF { @@_font_get_ #1 :N } {
    \use:c { @@_font_get_ #1 :N } #2
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\SetFontParameter}
%   \cmd{\SetFontParameter}\marg{name}\marg{font}\marg{value} sets the font
%   parameter identified by \meta{name} in the \term{font} to the \meta{value},
%   which must be a \term{number} or a \term{dimen}, depending on the data type
%   of the parameter.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \SetFontParameter #1 #2 #3 {
  \cs_if_exist:cTF { @@_font_set_ #1 :Nn } {
    \use:c { @@_font_set_ #1 :Nn } #2 { #3 }
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FontParameterByStyle}
%   \cmd{\FontParameterByStyle}\marg{name}\marg{style} expands to a
%   \term{number} or a \term{dimen} which contains the value of the font
%   parameter identified by \meta{name} in the \meta{style}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \FontParameterByStyle #1 #2 {
  \cs_if_exist:cTF { @@_style_get_ #1 :N } {
    \use:c { @@_style_get_ #1 :N } #2
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\SetFontParameterByStyle}
%   \cmd{\SetFontParameterByStyle}\marg{name}\marg{style}\marg{value} sets the
%   font parameter identified by \meta{name} in the \meta{style} to the
%   \meta{value}, which must be a \term{number} or a \term{dimen}, depending on
%   the data type of the parameter.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \SetFontParameterByStyle #1 #2 #3 {
  \cs_if_exist:cTF { @@_style_set_ #1 :Nn } {
    \use:c { @@_style_set_ #1 :Nn } #2 { #3 }
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
%</package>
%    \end{macrocode}
% \end{macro}
%
% \Finale
\endinput
