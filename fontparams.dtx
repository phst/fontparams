% \iffalse meta-comment
%
% fontparams.dtx
% Copyright 2010 Philipp Stephani
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2009/09/24 or later.
%
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Philipp Stephani.
% This work consists of all files listed in MANIFEST.
%
% \fi
%
% \iffalse
%<*driver>
\documentclass[a4paper, 10pt]{phst-doc}

\usepackage{fontparams}
\newcommand*{\thispackage}{\textsf{fontparams}\xspace}

\setlength{\overfullrule}{5pt}

\begin{document}

\DocInput{fontparams.dtx}
\PrintChanges
\PrintIndex

\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2010/11/08}{Initial version}
%
% \GetFileInfo{fontparams.sty}
%
% \title{The \thispackage package\thanks{This document corresponds to \thispackage{}~\fileversion, dated~\filedate.}}
% \author{Philipp Stephani \\ \mail{st_philipp@yahoo.de}}
% \date{\filedate}
%
%
% \maketitle
% \tableofcontents
% \listoftables
%
%
% \section{Introduction}
%
% \TeX\ is a fairly flexible typesetting system that can be used with a variety
% of fonts.  This ability requires the access to font-specific quantities,
% which can be divided into two groups: quantities that are specific to each
% character or glyph in the font, and quantities that refer to the font as a
% whole.  For the purpose of this package, the quantities from the latter group
% shall henceforth be called \emph{font parameters}.
%
% This document describes the \LaTeXe\ package \thispackage which provides
% simple read and write access to various of these font parameters.  It assumes
% basic knowledge about the general structure of \TeX-based typesetting
% systems.  A very accessible introduction to terms like “engine” and “format”
% may be found in the document
% \textsf{lualatex-doc.pdf}\footnote{\url{http://ctan.org/tex-archive/info/luatex/lualatex-doc/lualatex-doc.pdf}}
% by \MPG, which is an interesting read even if you aren’t interested in
% \hologo{LuaLaTeX}.
%
% Unfortunately, the three major general-purpose \TeX\ engines—\hologo{pdfTeX},
% \hologo{XeTeX} and \hologo{LuaTeX}—have different approaches for accessing
% font parameters.  The \thispackage package aims at providing a consistent
% engine-independent interface to font parameters.
%
% At present, the package only focuses on parameters for mathematics
% typesetting.  Because mathematics typesetting is inherently two-dimensional
% and lots of font-specific fine tuning of positions and distances are required
% for quality results, \TeX\ has always had dozens of font parameters only for
% this purpose, which are accessible by virtue of the \cmd{\fontdimen}
% primitive.  But the situation changed dramatically when OpenType math
% typesetting, originally introduced by Microsoft in 2007, would be implemented
% in the \hologo{XeTeX} and \hologo{LuaTeX} engines.  Not only does OpenType
% math increase the number of font parameters a lot, it also requires
% incompatible changes to the interface for accessing the parameters.
%
% One might wonder why aforementioned incompatible changes are necessary at
% all.  There are three reasons for this:
% \begin{itemize}
% \item Original \TeX\ collapses several related font parameters into one.  The
%   most striking example for this is the \emph{default rule width}, which
%   controls not only the width of all horizontal rules known to the engine
%   (fraction bars, over- and underlines, radical rules), but is also employed
%   as a generic vertical distance; OpenType math, on the other hand, knows
%   separate font parameters for all these quantities.
% \item Moreover \TeX\ often uses composite font parameters that are in fact
%   results of calculations including one or more of the basic font parameters.
%   Again, OpenType math has separate parameters for these quantities.
% \item \TeX\ fonts could originally hold a maximum of 128~glyphs, way too few
%   for math typesetting.  Therefore the available glyphs and font parameters
%   are scattered in more than one font.  By contrast, OpenType math fonts have
%   all characters in one single font, which is possible nowadays thanks to
%   Unicode and OpenType.  Since \TeX\ font dimensions are indexed by positive
%   integers and numbered consecutively, overlaps occur in the range of valid
%   font dimension numbers; \ie, the $i$th font dimension of one math font will
%   usually be different from the $i$th font dimension of another font, but
%   both font parameters are required for correct math typesetting.  Because
%   each font dimension must be well-defined, OpenType math fonts cannot
%   provide both dimensions at index~$i$; at least one of them must be shifted
%   to a different position, which already breaks compatbility.
% \end{itemize}
%
% \Hologo{XeTeX} and \hologo{LuaTeX} take different approaches in presenting
% math font parameters to the user.  \Hologo{XeTeX}, sticking to traditional
% \TeX, uses additional font dimensions that can be accessed through the
% \cmd{\fontdimen} primitive; \hologo{LuaTeX}, on the other hand, uses a clean,
% consistent and modern interface based on additional primitives.  The
% \thispackage package follows the \hologo{LuaTeX} way as far as possible.
%
% It is important to realize that not only the interfaces, but also the
% capabilities of the engines differ; while \thispackage tries hard to provide
% a consistent interface to the available font parameters, it cannot do magic:
% functionality that the underlying engine doesn’t provide remains unavailable.
% The package is intended to be used mainly as a compatibility layer for
% \emph{querying} font parameter values in a \hologo{LuaTeX}-like manner from
% the less capable engines \hologo{pdfTeX} and \hologo{XeTeX}; \emph{changing}
% parameters may be impossible or yield surprising behavior.  The fewest issues
% are expected with \hologo{LuaTeX}.  To be more specific, notable limitations
% of certain engines include:
% \begin{itemize}
% \item Font parameters that are composite in \hologo{pdfTeX} can be queried,
%   but not set.
% \item Parameters that map to a single \hologo{pdfTeX} font dimension are
%   essentially aliases of each other, and setting one of them changes the
%   others, too, which may result in unexpected changes in typesetting
%   behavior.  For example, setting the overbar rule width will change the
%   distances between numerator and denominator in fraction-like constructs.
% \item Font parameters for things that are handled on the format level in
%   \hologo{pdfTeX}, but are moved to the engine with OpenType math (\eg,
%   radical degrees) are unavailable to \hologo{pdfTeX}.
% \item Most extended font parameters can be changed in all engines, and
%   subsequent queries yield the new value, as expected.  \hologo{XeTeX},
%   however, always uses the values that were active during font loading for
%   typesetting, so setting the extended parameters usually doesn’t change the
%   output.  Inconsistencies may arise if a font parameter is used by both the
%   engine and macro packages: after the parameter has been changed, the engine
%   uses the original value, but macro packages use the new value.
% \item Parameters that cannot be accessed through font dimensions in
%   \hologo{XeTeX} are not available when compiling with that engine.
% \item Parameters which are not dimensions (\eg,
%   \cmd{\Umathradicaldegreeraise}) cannot be set in \hologo{XeTeX} using the
%   \hologo{LuaTeX} syntax.
% \item Parameters that have no \hologo{LuaTeX} primitive assigned to them are
%   not available in \hologo{LuaTeX}.
% \item Some of the parameters that didn’t exist in \hologo{pdfTeX} are
%   assigned garbage values in \hologo{LuaTeX} when non-Open Type fonts are
%   selected.
% \end{itemize}
%
%
% \section{Usage notes}
%
% The \thispackage package should work with a state-of-the art
% \TeX~distribution such as \TeXLive 2010.  It requires a recent version of the
% \pkg{expl3} bundle\footnote{\url{http://ctan.org/pkg/expl3}}.  For using the
% package, only the files \texttt{fontparams.sty} and \texttt{fontparams.lua}
% and the files ending in \texttt{.def} are required.  The package manual is
% contained in the file \texttt{fontparams.pdf}.  Development versions are
% hosted on GitHub\footnote{\url{http://github.com/phst/fontparams}}.  Please
% report all issues at the issue
% tracker\footnote{\url{http://github.com/phst/fontparams/issues}}.
%
%
%
% \section{Interface}
%
% Load the \thispackage package with the standard \LaTeXe\ commands:
% \begin{verbatim}
% \usepackage{fontparams}
% \end{verbatim}
% or (in package or class files):
% \begin{verbatim}
% \RequirePackage{fontparams}
% \end{verbatim}
% The package does not accept any options.
%
% The following description of the package is split up in two part:
% \autoref{sec:informal} contains informal descriptions for users that don’t
% want to be bothered with \TeX\ grammar terms; \autoref{sec:formal} formally
% defines the public interface of the package, and forms its normative
% description.
%
%
% \subsection{Informal description}
% \label{sec:informal}
%
% Font parameters are either integers or lengths; the font parameter
% expressions described below may be used wherever \LaTeX\ expects an
% expression of the respective type.  Examples for integer expressions are
% \texttt{351} or \cmd{\value}\marg{counter}; examples for length expressions
% are \texttt{27.4pt} or \cmd{\linewidth}.
%
%
% \subsection{Formal definition}
% \label{sec:formal}
%
%
% \subsection{Available font parameters}
% \label{sec:list}
%
% \NewDocumentCommand{\FontparamDesc}{mmmmmm}{
% \item
%   OpenType name: #1 \\
%   \Hologo{LuaTeX} primitive: #2 \\
%   Type: \term{#3} \\
%   Read access in: #4 \\
%   Write access in: #5 \\
%   Description: #6
% }
%
%   \begin{itemize}
%     \input{fontparams-desc.tex}
%   \end{itemize}
%
%
% \StopEventually{}
%
%
% \section{Technical notes}
%
%
% \section{Implementation of the \LaTeXe\ package}
%
% \subsection{Initialization}
%
% We start by loading the \LaTeX3 packages and identifying ourselves.
%    \begin{macrocode}
%<*package>
\NeedsTeXFormat{LaTeX2e}[2009/09/24]
\RequirePackage{expl3}[2010/10/02]
\ProvidesExplPackage{fontparams}{2010/12/21}{0.1}%
  {Unified font parameter access}
%    \end{macrocode}
%
% \subsection{Messages}
%
% \begin{l3message}{unknown-style}
%   This message is issued when an unknown mathematical style is queried.  The
%   only argument should be the stringized name of the requested style token.
%    \begin{macrocode}
\msg_new:nnnn { fontparams } { unknown-style } {
  Unknown~ mathematical~ style~ #1
} {
  Use~ one~ of:~
  \exp_not:n {
    \displaystyle,~ \crampeddisplaystyle,~
    \textstyle,~ \crampedtextstyle,~
    \scriptstyle,~ \crampedscriptstyle,~
    \scriptscriptstyle,~ \crampedscriptscriptstyle
  }
}
%    \end{macrocode}
% \end{l3message}
%
% \begin{l3message}{unknown-param}
%   This message is issued when an unknown parameter is queried.  The only
%   argument should be the OpenType name of the parameter.
%    \begin{macrocode}
\msg_new:nnn { fontparams } { unknown-param } {
  Unknown~ font~ parameter~ #1
}
%    \end{macrocode}
% \end{l3message}
%
% \begin{l3message}{readonly-param}
%   This message is issued when tries to set a parameter which is read-only for
%   the current engine.  The only argument should be the OpenType name of the
%   parameter.
%    \begin{macrocode}
\msg_new:nnn { fontparams } { readonly-param } {
  Font~ parameter~ #1~ is~ read-only
}
%    \end{macrocode}
% \end{l3message}
%
% \begin{l3message}{primitive-exists}
%   This message is issued when a \hologo{LuaTeX} primitive is already defined
%   prior to loading the package.  The only argument should be the stringized
%   name of the primitive token.
%    \begin{macrocode}
\msg_new:nnn { fontparams } { primitive-exists } {
  The~ command~ #1~ already~ exists~ and \\
  will~ be~ overwritten
}
%    \end{macrocode}
% \end{l3message}
%
% \subsection{Common definitions}
%
% Now we load the auto-generated file of common definitions.
%    \begin{macrocode}
\file_input:n { fontparams.def }
%    \end{macrocode}
%
% \subsection{\Hologo{LuaTeX} definitions}
%
% If \hologo{LuaTeX} is running, we load the accompanying Lua module.
%    \begin{macrocode}
\luatex_if_engine:TF {
  \RequirePackage { luatexbase } [ 2010/05/27 ]
  \RequireLuaModule { fontparams } [ 2010/12/21 ]
%    \end{macrocode}
%
% \begin{macro}{\fontparams_undefine:N}
%   The macro \cmd{\fontparams_undefine:N}\marg{control sequence} warns if the
%   \term{control sequence} is already defined and then undefines it.
%    \begin{macrocode}
  \cs_new_protected_nopar:Npn \fontparams_undefine:N #1 {
    \cs_if_exist:NT #1 {
      \msg_warning:nnx { fontparams } { primitive-exists }
        { \token_to_str:N #1 }
    }
%    \end{macrocode}
% \cmd{\cs_if_exists:N} treats control sequences equal to \cmd{\relax} as
% undefined, but \verb|tex.enableprimitives| does not.  So we always explicitly
% undefine the control sequence.
%    \begin{macrocode}
    \cs_undefine:N #1
  }
%    \end{macrocode}
% \end{macro}
%
% Finally we load the \hologo{TeX} definitions and enable the additional
% primitives.  The primitives will always be enabled because the definition
% file undefines all of them.
%    \begin{macrocode}
  \file_input:n { fontparams-luatex.def }
  \lua_now:x { fontparams.activate_primitives() }
%    \end{macrocode}
%
% \subsection{Legacy definitions}
%
% First we load the file that contains the definitions common to \hologo{XeTeX}
% and \hologo{pdfTeX}.
%    \begin{macrocode}
} {
  \file_input:n { fontparams-legacy.def }
%    \end{macrocode}
%
% \begin{macro}{\crampeddisplaystyle}
% \begin{macro}{\crampedtextstyle}
% \begin{macro}{\crampedscriptstyle}
% \begin{macro}{\crampedscriptscriptstyle}
%   The cramped style tokens must be available for the interface commands, but
%   should generate an error when being expanded or typeset.  We just use
%   quarks here.
%    \begin{macrocode}
  \quark_new:N \crampeddisplaystyle
  \quark_new:N \crampedtextstyle
  \quark_new:N \crampedscriptstyle
  \quark_new:N \crampedscriptscriptstyle
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fontparams_abs:n}
%   The macro \cmd{\fontparams_abs:n}\marg{dimen} expands to another
%   \term{dimen} which is the absolute value of the passed \term{dimen}.
%    \begin{macrocode}
  \cs_new_protected_nopar:Npn \fontparams_abs:n #1 {
    \dimexpr
    \dim_compare:nNnT { #1 } < { \c_zero_dim } { - }
    \dimexpr #1 \relax
    \relax
  }
%    \end{macrocode}
% \end{macro}
%
% We load the \hologo{pdfTeX} definitions for both \hologo{pdfTeX} and
% \hologo{XeTeX} so that legacy fonts use the correct definitions in
% \hologo{XeTeX}.
%    \begin{macrocode}
  \file_input:n { fontparams-pdftex.def }
%    \end{macrocode}
%
% \begin{macro}{\fontparams_load_xetex_def:}
% \begin{macro}{\fontparams_load_pdftex_def:}
%   For \hologo{XeTeX} only we create two macros to switch between the
%   definitions.
%    \begin{macrocode}
  \xetex_if_engine:T {
    \cs_new_protected_nopar:Npn \fontparams_load_xetex_def: {
      \file_input:n { fontparams-xetex.def }
    }
    \cs_new_protected_nopar:Npn \fontparams_load_pdftex_def: {
      \file_input:n { fontparams-pdftex.def }
    }
  }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{User interface}
%
% \begin{macro}{\ActivateOpenTypeFontParameters}
% \begin{macro}{\ActivateLegacyFontParameters}
%   If \hologo{XeTeX} is the current engine, we define commands to load the
%   OpenType or legacy font parameter definitions.
%    \begin{macrocode}
\xetex_if_engine:T {
  \cs_new_protected_nopar:Npn \ActivateOpenTypeFontParameters {
    \fontparams_load_xetex_def:
  }
  \cs_new_protected_nopar:Npn \ActivateLegacyFontParameters {
    \fontparams_load_pdftex_def:
  }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\FontParameter}
%   \cmd{\FontParameter}\marg{name}\marg{font} expands to a \term{number} or a
%   \term{dimen} which contains the value of the font parameter identified by
%   \meta{name} in the \term{font}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \FontParameter #1 #2 {
  \cs_if_exist:cTF { fontparams_font_get_ #1 :N } {
    \use:c { fontparams_font_get_ #1 :N } #2
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\SetFontParameter}
%   \cmd{\SetFontParameter}\marg{name}\marg{font}\marg{value} sets the font
%   parameter identified by \meta{name} in the \term{font} to the \meta{value},
%   which must be a \term{number} or a \term{dimen}, depending on the data type
%   of the parameter.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \SetFontParameter #1 #2 #3 {
  \cs_if_exist:cTF { fontparams_font_set_ #1 :Nn } {
    \use:c { fontparams_font_set_ #1 :Nn } #2 { #3 }
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FontParameterByStyle}
%   \cmd{\FontParameterByStyle}\marg{name}\marg{style} expands to a
%   \term{number} or a \term{dimen} which contains the value of the font
%   parameter identified by \meta{name} in the \meta{style}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \FontParameterByStyle #1 #2 {
  \cs_if_exist:cTF { fontparams_style_get_ #1 :N } {
    \use:c { fontparams_style_get_ #1 :N } #2
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\SetFontParameterByStyle}
%   \cmd{\SetFontParameterByStyle}\marg{name}\marg{style}\marg{value} sets the
%   font parameter identified by \meta{name} in the \meta{style} to the
%   \meta{value}, which must be a \term{number} or a \term{dimen}, depending on
%   the data type of the parameter.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \SetFontParameterByStyle #1 #2 #3 {
  \cs_if_exist:cTF { fontparams_style_set_ #1 :Nn } {
    \use:c { fontparams_style_set_ #1 :Nn } #2 { #3 }
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
%</package>
%    \end{macrocode}
% \end{macro}
%
% \Finale
\endinput
