% \iffalse meta-comment
%
% Copyright (C) 2010 by Philipp Stephani <st_philipp@yahoo.de>
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3c of this license or (at your option) any later
% version.  The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3c or later is part of all distributions of
% LaTeX version 2009/09/24 or later.
%
% \fi
%
% \iffalse
%<*driver>
\documentclass[a4paper, 10pt]{phst-doc}

\usepackage{fontparams}
\newcommand*{\thispackage}{\textsf{fontparams}\xspace}

\setlength{\overfullrule}{5pt}

\begin{document}

\DocInput{fontparams.dtx}
\PrintChanges
\PrintIndex

\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2010/11/08}{Initial version}
%
% \GetFileInfo{fontparams.sty}
%
% \title{The \thispackage package\thanks{This document corresponds to
% \thispackage{}~\fileversion, dated~\filedate.}}
% \author{Philipp Stephani \\ \mail{st_philipp@yahoo.de}}
% \date{\filedate}
%
%
% \maketitle
% \tableofcontents
% \listoftables
%
%
% \section{Introduction}
%
% \TeX\ is a fairly flexible typesetting system that can be used with a variety
% of fonts.  This ability requires the access to font-specific quantities,
% which can be divided into two groups: quantities that are specific to each
% character or glyph in the font, and quantities that refer to the font as a
% whole.  For the purpose of this package, the quantities from the latter group
% shall henceforth be called \emph{font parameters}.
%
% This document describes the \LaTeXe\ package \thispackage which provides
% simple read and write access to various of these font parameters.  It assumes
% basic knowledge about the general structure of \TeX-based typesetting
% systems.  A very accessible introduction to terms like “engine” and “format”
% may be found in the document
% \textsf{lualatex-doc.pdf}\footnote{\url{http://ctan.org/tex-archive/info/luatex/lualatex-doc/lualatex-doc.pdf}}
% by \MPG, which is an interesting read even if you aren’t interested in
% \hologo{LuaLaTeX}.
%
% Unfortunately, the three major general-purpose \TeX\ engines—\hologo{pdfTeX},
% \hologo{XeTeX} and \hologo{LuaTeX}—have different approaches for accessing
% font parameters.  The \thispackage package aims at providing a consistent
% engine-independent interface to font parameters.
%
% At present, the package only focuses on parameters for mathematics
% typesetting.  Because mathematics typesetting is inherently two-dimensional
% and lots of font-specific fine tuning of positions and distances are required
% for quality results, \TeX\ has always had dozens of font parameters only for
% this purpose, which are accessible by virtue of the \cmd{\fontdimen}
% primitive.  But the situation changed dramatically when OpenType math
% typesetting, originally introduced by Microsoft in 2007, would be implemented
% in the \hologo{XeTeX} and \hologo{LuaTeX} engines.  Not only does OpenType
% math increase the number of font parameters a lot, it also requires
% incompatible changes to the interface for accessing the parameters.
%
% One might wonder why aforementioned incompatible changes are necessary at
% all.  There are three reasons for this:
% \begin{itemize}
% \item Original \TeX\ collapses several related font parameters into one.  The
%   most striking example for this is the \emph{default rule width}, which
%   controls not only the width of all horizontal rules known to the engine
%   (fraction bars, over- and underlines, radical rules), but is also employed
%   as a generic vertical distance; OpenType math, on the other hand, knows
%   separate font parameters for all these quantities.
% \item Moreover \TeX\ often uses composite font parameters that are in fact
%   results of calculations including one or more of the basic font parameters.
%   Again, OpenType math has separate parameters for these quantities.
% \item \TeX\ fonts could originally hold a maximum of 128~glyphs, way too few
%   for math typesetting.  Therefore the available glyphs and font parameters
%   are scattered in more than one font.  By contrast, OpenType math fonts have
%   all characters in one single font, which is possible nowadays thanks to
%   Unicode and OpenType.  Since \TeX\ font dimensions are indexed by positive
%   integers and numbered consecutively, overlaps occur in the range of valid
%   font dimension numbers; \ie, the $i$th font dimension of one math font will
%   usually be different from the $i$th font dimension of another font, but
%   both font parameters are required for correct math typesetting.  Because
%   each font dimension must be well-defined, OpenType math fonts cannot
%   provide both dimensions at index~$i$; at least one of them must be shifted
%   to a different position, which already breaks compatbility.
% \end{itemize}
%
% \Hologo{XeTeX} and \hologo{LuaTeX} take different approaches in presenting
% math font parameters to the user.  \Hologo{XeTeX}, sticking to traditional
% \TeX, uses additional font dimensions that can be accessed through the
% \cmd{\fontdimen} primitive; \hologo{LuaTeX}, on the other hand, uses a clean,
% consistent and modern interface based on additional primitives.  The
% \thispackage package follows the \hologo{LuaTeX} way as far as possible.
%
% It is important to realize that not only the interfaces, but also the
% capabilities of the engines differ; while \thispackage tries hard to provide
% a consistent interface to the available font parameters, it cannot do magic:
% functionality that the underlying engine doesn’t provide remains unavailable.
% The package is intended to be used mainly as a compatibility layer for
% \emph{querying} font parameter values in a \hologo{LuaTeX}-like manner from
% the less capable engines \hologo{pdfTeX} and \hologo{XeTeX}; \emph{changing}
% parameters may be impossible or yield surprising behavior.  The fewest issues
% are expected with \hologo{LuaTeX}.  To be more specific, notable limitations
% of certain engines include:
% \begin{itemize}
% \item Font parameters that are composite in \hologo{pdfTeX} can be queried,
%   but not set.
% \item Parameters that map to a single \hologo{pdfTeX} font dimension are
%   essentially aliases of each other, and setting one of them changes the
%   others, too, which may result in unexpected changes in typesetting
%   behavior.  For example, setting the overbar rule width will change the
%   distances between numerator and denominator in fraction-like constructs.
% \item Font parameters for things that are handled on the format level in
%   \hologo{pdfTeX}, but are moved to the engine with OpenType math (\eg,
%   radical degrees) are unavailable to \hologo{pdfTeX}.
% \item Most extended font parameters can be changed in all engines, and
%   subsequent queries yield the new value, as expected.  \hologo{XeTeX},
%   however, always uses the values that were active during font loading for
%   typesetting, so setting the extended parameters usually doesn’t change the
%   output.  Inconsistencies may arise if a font parameter is used by both the
%   engine and macro packages: after the parameter has been changed, the engine
%   uses the original value, but macro packages use the new value.
% \item Parameters that cannot be accesses through font dimensions in
%   \hologo{XeTeX} are not available when compiling with that engine.
% \item Parameters which are not dimensions (\eg,
%   \cmd{\Umathradicaldegreeraise}) cannot be set in \hologo{XeTeX}.
% \item Parameters that have no \hologo{LuaTeX} primitive assigned to them are
%   not available in \hologo{LuaTeX}.
% \item Some of the parameters that didn’t exist in \hologo{pdfTeX} are
%   assigned garbage values in \hologo{LuaTeX} when non-Open Type fonts are
%   selected.
% \end{itemize}
%
%
% \section{Usage notes}
%
% The \thispackage package should work with a state-of-the art
% \TeX~distribution such as \TeXLive 2010.  It requires a recent version of the
% \pkg{expl3} bundle\footnote{\url{http://ctan.org/pkg/expl3}}.  Development
% versions are hosted on
% GitHub\footnote{\url{http://github.com/phst/fontparams}}.  Please report all
% issues at the issue
% tracker\footnote{\url{http://github.com/phst/fontparams/issues}}.
%
%
%
% \section{Interface}
%
%
%
% \StopEventually{}
%
%
% \section{Implementation}
%
% \subsection{Initialization}
%
% We start by loading the \LaTeX3 packages and identifying ourselves.
%    \begin{macrocode}
%<*package>
\NeedsTeXFormat{LaTeX2e}[2009/09/24]
\RequirePackage{expl3}[2010/10/02]
\ProvidesExplPackage{fontparams}{2010/11/08}{0.1}%
  {Unified font parameter access}
\RequirePackage{l3keys2e}[2010/10/13]
%    \end{macrocode}
%
% \subsection{Helper macros for all engines}
%
% First a few common helper macros for the high-level interface.
% \begin{macro}{\fontparams_create_getters:nN}
%   The macro \cmd{\fontparams_create_getters:nN}\marg{OpenType name
%   list}\meta{internal command} generates getter functions so that each name
%   in the comma-separated \meta{OpenType name list} can be used as the first
%   argument to \cmd{\FontParameter}, wrapping the \meta{internal command}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fontparams_create_getters:nN #1 #2 {
  \clist_map_inline:nn { #1 } {
    \cs_gnew_nopar:cpn {
      fontparams_get_ ##1 :N
    } ####1 {
      #2 ####1
    }
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontparams_create_setters:nN}
%   The macro \cmd{\fontparams_create_setters:nN}\marg{OpenType name
%   list}\meta{internal command} generates setter functions so that each name
%   in the comma-separated \meta{OpenType name list} can be used as the first
%   argument to \cmd{\SetFontParameter}, wrapping the \meta{internal command}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fontparams_create_setters:nN #1 #2 {
  \clist_map_inline:nn { #1 } {
    \cs_gnew_protected_nopar:cpn {
      fontparams_set_ ##1 :Nn
    } ####1 ####2 {
      #2 ####1 \dim_eval:n { ####2 }
    }
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontparams_create_accessors:nN}
%   The macro \cmd{\fontparams_create_accessors:nN}\marg{OpenType name
%   list}\meta{internal command} generates getter and setter functions so that
%   each name in the comma-separated \meta{OpenType name list} can be used as
%   the first argument to \cmd{\FontParameter} and \cmd{\SetFontParameter},
%   respectively, wrapping the \meta{internal command}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fontparams_create_accessors:nN #1 #2 {
  \fontparams_create_getters:nN { #1 } #2
  \fontparams_create_setters:nN { #1 } #2
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Engine-specific helper macros}
%
% Now comes the engine abstraction level.
% For each engine, two main factory macros are defined:
% \begin{macro}{\fontparams_new:nNnnnnnnnn}
%   The macro with the somewhat intimidating signature \\
%   \cmd{\fontparams_new:nNnnnnnnnn}\marg{OpenType names}\meta{\hologo{LuaTeX}
%   command}\marg{\hologo{XeTeX}, $D$}\marg{\hologo{XeTeX},
%   $D'$}\marg{\hologo{XeTeX}, $T$}\marg{\hologo{XeTeX}, $T'$}\marg{\TeX,
%   $D$}\marg{\TeX, $D'$}\marg{\TeX, $T$} \marg{\TeX, $T'$} is the main factory
%   macro for math font parameters which are \meta{dimen}s.  The definitions
%   for all engines are provided as arguments; for each engine an appropriate
%   definition using the respective arguments and ignoring the others must be
%   provided.  Since \cmd{\fontparams_new:nNnnnnnnnn} has ten parameters, it
%   must be defined using at least two macros to allow for grabbing all
%   arguments.  The arguments are interpreted as follows:
%   \begin{itemize}
%   \item \meta{OpenType names} is a possibly empty comma-separated list of
%     names which should be valid first arguments to the commands
%     \cmd{\FontParameter} and \cmd{\SetFontParameter}.
%   \item \meta{\hologo{LuaTeX} command} is either a command described in the
%     \hologo{LuaTeX} Reference that provides access to the font parameter, or
%     the quark \cmd{\q_nil}, indicating that no \hologo{LuaTeX} interface
%     command exists or should be created.
%   \item The next four arguments contain extended font dimension numbers that
%     are to be used when \hologo{XeTeX} is the active engine and an OpenType
%     math font is selected.  They must either be all empty, indicating that
%     \hologo{XeTeX} has no access to the respective font parameter, or all
%     \meta{number}s which are taken as font dimension numbers for the
%     non-cramped display style (\meta{\hologo{XeTeX}, $D$}), the cramped
%     display style (\meta{\hologo{XeTeX}, $D'$}), non-cramped non-display
%     styles (\meta{\hologo{XeTeX}, $T$}), and cramped non-display styles
%     (\meta{\hologo{XeTeX}, $T'$}).
%   \item The remaining four arguments contain expressions that are to be used
%     for calculating simple or composite font parameters for all other
%     situations.  They must either be all empty, indicating that there is no
%     access to the respective font parameter, or expressions that upon
%     exhaustive expansion resolve to valid \meta{dimen expr}s (as defined in
%     the \eTeX\ manual) subject to the following replacements:
%     \begin{itemize}
%     \item Each term of the form \cmd{\sigma}\marg{number} is replaced by \\
%       \cmd{\fontdimen}\meta{number}\meta{font}\texttt{2}, where \meta{font}
%       is the font corresponding to the math style given as argument to the
%       interface function; the result is a \meta{dimen}.
%     \item Likewise, each term of the form \cmd{\xi}\marg{number} is replaced
%       by \\ \cmd{\fontdimen}\meta{number}\meta{font}\texttt{3}.
%     \item Each term of the form \cmd{\abs}\marg{dimen expr} is replaced by
%       the absolute value of the \meta{dimen expr}; the result is a
%       \meta{dimen}.
%     \end{itemize}
%   \end{itemize}
% \end{macro}
%
% \begin{macro}{\fontparams_new_int:nNn}
%   The macro \cmd{\fontparams_new_int:nNn}\marg{OpenType
%   names}\meta{\hologo{LuaTeX} command} \marg{\hologo{XeTeX} dimension} is the
%   main factory macro for math font parameters which are \meta{number}s.  The
%   definitions for \hologo{LuaTeX} and \hologo{XeTeX} are provided as
%   arguments; for each engine an appropriate definition using the respective
%   arguments and ignoring the others must be provided.  The arguments are
%   interpreted as follows:
%   \begin{itemize}
%   \item \meta{OpenType names} is a possibly empty comma-separated list of
%     names which should be valid first arguments to the commands
%     \cmd{\FontParameter} and \cmd{\SetFontParameter}.
%   \item \meta{\hologo{LuaTeX} command} is either a command described in the
%     \hologo{LuaTeX} Reference that provides access to the font parameter, or
%     the quark \cmd{\q_nil}, indicating that no \hologo{LuaTeX} interface
%     command exists or should be created.
%   \item The remaining argument contains an extended font dimension number
%     that is to be used when \hologo{XeTeX} is the active engine and an
%     OpenType math font is selected.  It must either be empty, indicating that
%     \hologo{XeTeX} has no access to the respective font parameter, or a
%     \meta{number} which is taken as font dimension number for all math
%     styles.  The \meta{dimen} resulting from querying the \hologo{XeTeX} font
%     dimension is converted to a \meta{number} by taking its value in scaled
%     points.
%   \end{itemize}
% \end{macro}
%
% \subsubsection{\Hologo{LuaTeX}}
%
% First the \hologo{LuaLaTeX} stuff, which is easiest.
%    \begin{macrocode}
\luatex_if_engine:TF {
%    \end{macrocode}
%
% \begin{macro}{\crampeddisplaystyle}
% \begin{macro}{\crampedtextstyle}
% \begin{macro}{\crampedscriptstyle}
% \begin{macro}{\crampedscriptscriptstyle}
%   \Hologo{LuaLaTeX} uses prefixed names for all \hologo{LuaTeX} primitives.
%   We create unprefixed aliases for the cramped styles to match the
%   traditional \TeX\ names.
%    \begin{macrocode}
  \clist_map_inline:nn { display, text, script, scriptscript } {
    \cs_new_eq:cc { cramped #1 style } { luatexcramped #1 style }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fontparams_new_aux_ii:NNn}
%   The macro \cmd{\fontparams_new_aux_ii:NNn}\meta{prefixed \hologo{LuaTeX}
%   command}\meta{unprefixed \hologo{LuaTeX} command}\marg{OpenType names}
%   creates a command alias \meta{unprefixed \hologo{LuaTeX} command} that maps
%   to the \meta{prefixed \hologo{LuaTeX} command} and enables the read and
%   write high-level interface for the \meta{OpenType names}.  The command
%   \meta{prefixed \hologo{LuaTeX} command} must be an actual \hologo{LuaTeX}
%   math font parameter primitive contained in the format, like
%   \cmd{\luatexUmath}.
%    \begin{macrocode}
  \cs_new_protected_nopar:Npn \fontparams_new_aux_ii:NNn #1 #2 #3 {
    \cs_gnew_eq:NN #2 #1
    \fontparams_create_accessors:nN { #3 } #1
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontparams_new_aux_i:Nn}
%   The macro \cmd{\fontparams_new_aux_i:Nn}\meta{unprefixed \hologo{LuaTeX}
%   command}\marg{OpenType names} creates a command alias \meta{unprefixed
%   \hologo{LuaTeX} command} that maps to the respective prefixed
%   \hologo{LuaTeX} command and enables the read and write high-level interface
%   for the \meta{OpenType names}.
%    \begin{macrocode}
  \cs_new_protected_nopar:Npn \fontparams_new_aux_i:Nn #1 #2 {
    \quark_if_nil:NF #1 {
      \exp_args:Nc
      \fontparams_new_aux_ii:NNn { luatex \cs_to_str:N #1 } #1 { #2 }
    }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontparams_new:nNnnnnnnnn}
% \begin{macro}{\fontparams_new_int:nNn}
%   The main factory macros simply delegate to the auxiliary macro above and
%   gobble the remaining arguments.
%    \begin{macrocode}
  \cs_new_protected_nopar:Npn \fontparams_new:nNnnnnnnnn #1 #2 {
    \fontparams_new_aux_i:Nn #2 { #1 }
    \use_none:nnnnnnnn
  }
  \cs_new_protected_nopar:Npn \fontparams_new_int:nNn #1 #2 #3 {
    \fontparams_new_aux_i:Nn #2 { #1 }
  }
} {
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Helper macros common to non-\hologo{LuaTeX} engines}
%
% Now follow common definitions for non-\hologo{LuaTeX} engines.
%
% \begin{macro}{\crampeddisplaystyle}
% \begin{macro}{\crampedtextstyle}
% \begin{macro}{\crampedscriptstyle}
% \begin{macro}{\crampedscriptscriptstyle}
%   The cramped style tokens must be available for the interface commands, but
%   should generate an error when being expanded or typeset.  We just use
%   quarks here.
%    \begin{macrocode}
  \clist_map_inline:nn { display, text, script, scriptscript } {
    \exp_args:Nc \quark_new:N { cramped #1 style }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% We always use simple macros that expand to either a \meta{dimen variable}
% (for writable parameters) or a \meta{dimen} (for read-only parameters); the
% high-level interface (\cmd{\FontParameter} and \cmd{\SetFontParameter}) then
% simply uses the accessor macros defined by
% \cmd{\fontparams_create_getters:nN} and friends.  Thus we need internal
% macros expanding to a \meta{dimen variable} or a \meta{dimen} for all
% parameters, even for those aren’t exposed by \hologo{LuaTeX} primitives.  We
% simply use a global unique counter to create the names for these private
% macros.
%
% \begin{macro}{\g_fontparams_unique_int}
%   A unique counter for \hologo{LuaTeX}-style font parameter commands that are
%   not assigned \hologo{LuaTeX} primitives.
%    \begin{macrocode}
  \int_new:N \g_fontparams_unique_int
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontparams_make_public_or_private:NN}
%   The macro \cmd{\fontparams_make_public_or_private:NN}\meta{factory
%   macro}\meta{\hologo{LuaTeX} command} creates the low-level accessor macro
%   using the \meta{factory macro}, which must be a macro receiving the control
%   sequence to be defined as first argument.  The name of that control
%   sequence is either \meta{\hologo{LuaTeX} command} if that is not equal to
%   \cmd{\q_nil}, or a globally unique private name otherwise.
%    \begin{macrocode}
  \cs_new_protected_nopar:Npn
  \fontparams_make_public_or_private:NN #1 #2 {
    \quark_if_nil:NTF #2 {
      \int_gincr:N \g_fontparams_unique_int
      \exp_args:Nc #1 {
        fontparams_private_ \int_use:N \g_fontparams_unique_int :N
      }
    } {
      #1 #2
    }
  }
%    \end{macrocode}
% \end{macro}
%
% \Hologo{XeTeX} can use OpenType math fonts or TFM-based fonts.  We must
% distinguish between these two kinds of fonts since the font dimension
% interfaces are totally different: OpenType math fonts use the extended font
% dimensions, whereas TFM-based fonts use the same interface as original \TeX\
% (and \hologo{pdfTeX}).  The font type must be given as package option or is
% determined depending on whether the \pkg{unicode-math} package is loaded.
%
% \begin{macro}{\g_fontparams_xetex_otf_bool}
%   A global Boolean variable that is only true if \hologo{XeTeX} is the
%   current engine and an OpenType math font will be used.
%    \begin{macrocode}
  \bool_new:N \g_fontparams_xetex_otf_bool
%    \end{macrocode}
% Option parsing.  The options are only available if \hologo{XeTeX} is the
% active engine.
%    \begin{macrocode}
  \xetex_if_engine:T {
    \keys_define:nn { fontparams } {
      font .choice:,
      font/tfm .code:n = {
        \bool_gset_false:N \g_fontparams_xetex_otf_bool
      },
      font/otf .code:n = {
        \bool_gset_true:N \g_fontparams_xetex_otf_bool
      },
      font/auto .code:n = {
        \@ifpackageloaded { unicode-math } {
          \bool_gset_true:N \g_fontparams_xetex_otf_bool
        } {
          \bool_gset_false:N \g_fontparams_xetex_otf_bool
        }
      }
    }
    \keys_set:nn { fontparams } { font = auto }
    \ProcessKeysPackageOptions { fontparams }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{\Hologo{XeTeX}, OpenType math fonts}
%
%    \begin{macrocode}
  \bool_if:NTF \g_fontparams_xetex_otf_bool {
    \cs_new_protected_nopar:Npn
    \fontparams_new_aux:Nnnnnnnn #1 #2 #3 #4 #5 #6 #7 #8 {
      \cs_gnew_nopar:Npn #1 ##1 {
        #3
        \tex_fontdimen:D
        \cs_if_eq:NNTF \tex_displaystyle:D ##1 {
          #5 \tex_textfont:D
        } {
          \cs_if_eq:NNTF \crampeddisplaystyle ##1 {
            #6 \tex_textfont:D
          } {
            \cs_if_eq:NNTF \tex_textstyle:D ##1 {
              #7 \tex_textfont:D
            } {
              \cs_if_eq:NNTF \crampedtextstyle ##1 {
                #8 \tex_textfont:D
              } {
                \cs_if_eq:NNTF \tex_scriptstyle:D ##1 {
                  #7 \tex_scriptfont:D
                } {
                  \cs_if_eq:NNTF \crampedscriptstyle ##1 {
                    #8 \tex_scriptfont:D
                  } {
                    \cs_if_eq:NNTF \tex_scriptscriptstyle:D ##1 {
                      #7 \tex_scriptscriptfont:D
                    } {
                      \cs_if_eq:NNTF \crampedscriptscriptstyle ##1 {
                        #8 \tex_scriptscriptfont:D
                      } {
                        \msg_error:nnx
                          { fontparams } { unknown-style }
                          { \token_to_str:N ##1 }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        \c_two
        #4
      }
      \tl_if_empty:nTF { #3 #4 } {
        \fontparams_create_accessors:nN { #2 } #1
      } {
        \fontparams_create_getters:nN { #2 } #1
      }
    }
    \cs_new_protected_nopar:Npn
    \fontparams_new:nNnnnnnnnn #1 #2 #3 #4 #5 #6 {
      \tl_if_empty:nF { #3 #4 #5 #6 } {
        \fontparams_make_public_or_private:NN
          \fontparams_new_aux:Nnnnnnnn #2 { #1 } { } { }
          { #3 } { #4 } { #5 } { #6 }
      }
      \use_none:nnnn
    }
    \cs_new_protected_nopar:Npn \fontparams_new_int:nNn #1 #2 #3 {
      \tl_if_empty:nF { #3 } {
        \fontparams_make_public_or_private:NN
          \fontparams_new_aux:Nnnnnnnn
          #2 { #1 } { \int_eval:w } { \int_eval_end: }
          { #3 } { #3 } { #3 } { #3 }
      }
    }
%    \end{macrocode}
%
% \subsubsection{\Hologo{XeTeX} or \hologo{pdfTeX}, TFM-based fonts}
%
%    \begin{macrocode}
  } {
    \prg_new_conditional:Npnn \fontparams_if_simple:n #1 { p } {
      \tl_if_single:nTF { #1 } {
        \prg_return_true:
      } {
        \int_compare:nNnTF { \tl_elt_count:n { #1 } } = { \c_two } {
          \tl_if_head_eq_meaning:nNTF { #1 } \sigma {
            \prg_return_true:
          } {
            \tl_if_head_eq_meaning:nNTF { #1 } \xi {
              \prg_return_true:
            } {
              \prg_return_false:
            }
          }
        } {
          \prg_return_false:
        }
      }
    }
    \cs_new_protected_nopar:Npn \fontparams_abs:n #1 {
      \dim_eval:n {
        \dim_compare:nNnT { #1 } < { \c_zero_dim } { - } #1
      }
    }
    \cs_new_protected_nopar:Npn
    \fontparams_new_aux_ii:Nnnnnn #1 #2 #3 #4 #5 #6 {
      \group_begin:
      \bool_set:Nn \l_fontparams_simple_bool {
        \fontparams_if_simple_p:n { #3 }
        && \fontparams_if_simple_p:n { #4 }
        && \fontparams_if_simple_p:n { #5 }
        && \fontparams_if_simple_p:n { #6 }
      }
      \cs_set_nopar:Npn \abs ##1 {
        \fontparams_abs:n { ##1 }
      }
      \cs_set_nopar:Npn \sigma ##1 {
        \tex_fontdimen:D ##1 \tex_textfont:D \c_two
      }
      \cs_set_nopar:Npn \xi ##1 {
        \tex_fontdimen:D ##1 \tex_textfont:D \c_three
      }
      \tl_set:Nx \l_fontparams_display_tl { #3 }
      \tl_set:Nx \l_fontparams_display_cramped_tl { #4 }
      \tl_set:Nx \l_fontparams_text_tl { #5 }
      \tl_set:Nx \l_fontparams_text_cramped_tl { #6 }
      \cs_set_nopar:Npn \sigma ##1 {
        \tex_fontdimen:D ##1 \tex_scriptfont:D \c_two
      }
      \cs_set_nopar:Npn \xi ##1 {
        \tex_fontdimen:D ##1 \tex_scriptfont:D \c_three
      }
      \tl_set:Nx \l_fontparams_script_tl { #5 }
      \tl_set:Nx \l_fontparams_script_cramped_tl { #6 }
      \cs_set_nopar:Npn \sigma ##1 {
        \tex_fontdimen:D ##1 \tex_scriptscriptfont:D \c_two
      }
      \cs_set_nopar:Npn \xi ##1 {
        \tex_fontdimen:D ##1 \tex_scriptscriptfont:D \c_three
      }
      \tl_set:Nx \l_fontparams_scriptscript_tl { #5 }
      \tl_set:Nx \l_fontparams_scriptscript_cramped_tl { #6 }
      \cs_gnew_nopar:Npx #1 ##1 {
        \bool_if:NF \l_fontparams_simple_bool {
          \exp_not:N \dim_eval:w
        }
        \exp_not:n {
          \cs_if_eq:NNTF \tex_displaystyle:D
        } ##1 {
          \l_fontparams_display_tl
        } {
          \exp_not:n {
            \cs_if_eq:NNTF \crampeddisplaystyle
          } ##1 {
            \l_fontparams_display_cramped_tl
          } {
            \exp_not:n {
              \cs_if_eq:NNTF \tex_textstyle:D
            } ##1 {
              \l_fontparams_text_tl
            } {
              \exp_not:n {
                \cs_if_eq:NNTF \crampedtextstyle
              } ##1 {
                \l_fontparams_text_cramped_tl
              } {
                \exp_not:n {
                  \cs_if_eq:NNTF \tex_scriptstyle:D
                } ##1 {
                  \l_fontparams_script_tl
                } {
                  \exp_not:n {
                    \cs_if_eq:NNTF \crampedscriptstyle
                  } ##1 {
                    \l_fontparams_script_cramped_tl
                  } {
                    \exp_not:n {
                      \cs_if_eq:NNTF \tex_scriptscriptstyle:D
                    } ##1 {
                      \l_fontparams_scriptscript_tl
                    } {
                      \exp_not:n {
                        \cs_if_eq:NNTF \crampedscriptscriptstyle
                      } ##1 {
                        \l_fontparams_scriptscript_cramped_tl
                      } {
                        \msg_error:nnx
                          { fontparams } { unknown-style }
                          { \exp_not:N \token_to_str:N ##1 }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        \bool_if:NF \l_fontparams_simple_bool {
          \dim_eval_end:
        }
      }
      \bool_if:NTF \l_fontparams_simple_bool {
        \fontparams_create_accessors:nN { #2 } #1
      } {
        \fontparams_create_getters:nN { #2 } #1
      }
      \group_end:
    }
    \cs_new_protected_nopar:Npn
    \fontparams_new_aux_i:nNnnnn #1 #2 #3 #4 #5 #6 {
      \tl_if_empty:nF { #3 #4 #5 #6 } {
        \fontparams_make_public_or_private:NN
          \fontparams_new_aux_ii:Nnnnnn #2 { #1 } 
          { #3 } { #4 } { #5 } { #6 }
      }
    }
    \cs_new_protected_nopar:Npn
    \fontparams_new:nNnnnnnnnn #1 #2 #3 #4 #5 #6 {
      \fontparams_new_aux_i:nNnnnn { #1 } #2
    }
    \cs_new_eq:NN \fontparams_new_int:nNn \use_none:nnn
  }
}
%    \end{macrocode}
%
% \subsection{Helper factory macros}
%
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fontparams_new:nN #1 #2 {
  \fontparams_new:nNnnnnnnnn
    { #1 } #2 { } { } { } { } { } { } { } { }
}
\cs_new_protected_nopar:Npn \fontparams_new:nn #1 #2 {
  \fontparams_new:nNnnnnnnnn
    { #1 } \q_nil { #2 } { #2 } { #2 } { #2 } { } { } { } { }
}
\cs_new_protected_nopar:Npn \fontparams_new:nNn #1 #2 #3 {
  \fontparams_new:nNnnnnnnnn
    { #1 } #2 { #3 } { #3 } { #3 } { #3 } { } { } { } { }
}
\cs_new_protected_nopar:Npn \fontparams_new:nNnn #1 #2 #3 #4 {
  \fontparams_new:nNnnnnnnnn
    { #1 } #2 { #3 } { #3 } { #3 } { #3 } { #4 } { #4 } { #4 } { #4 }
}
\cs_new_protected_nopar:Npn \fontparams_new:nNnnnn #1 #2 #3 #4 #5 #6 {
  \fontparams_new:nNnnnnnnnn
    { #1 } #2 { #3 } { #3 } { #4 } { #4 } { #5 } { #5 } { #6 } { #6 }
}
%    \end{macrocode}
%
% \subsection{Defining the font parameters}
%
%    \begin{macrocode}
\fontparams_new:nn { ScriptPercentScaleDown } { 10 }
\fontparams_new:nn { ScriptScriptPercentScaleDown } { 11 }
\fontparams_new:nn { DelimitedSubFormulaMinHeight } { 12 }
\fontparams_new:nNn { DisplayOperatorMinHeight }
  \Umathoperatorsize { 13 }
\fontparams_new:nn { MathLeading } { 14 }
\fontparams_new:nNnn { AxisHeight }
  \Umathaxis { 15 } { \sigma{22} }
\fontparams_new:nn { AccentBaseHeight } { 16 }
\fontparams_new:nn { FlattenedAccentBaseHeight } { 17 }
\fontparams_new:nNnn { SubscriptShiftDown }
  \Umathsubshiftdown { 18 } { \sigma{16} }
\fontparams_new:nNnn { SubscriptTopMax }
  \Umathsubtopmax { 19 } { 0.8 \abs{\sigma{5}} }
\fontparams_new:nNnn { SubscriptBaselineDropMin }
  \Umathsubshiftdrop { 20 } { \sigma{19} }
\fontparams_new:nNnnnnnnnn
  { SuperscriptShiftUp, SuperscriptShiftUpCramped }
  \Umathsupshiftup
  { 21 } { 22 } { 21 } { 22 }
  { \sigma{13} } { \sigma{15} } { \sigma{14} } { \sigma{15} }
\fontparams_new:nNnn { SuperscriptBottomMin }
  \Umathsupbottommin { 23 } { 0.25 \abs{\sigma{5}} }
\fontparams_new:nNnn { SuperscriptBaselineDropMax }
  \Umathsupshiftdrop { 24 } { \sigma{18} }
\fontparams_new:nNnn { SubSuperscriptGapMin }
  \Umathsubsupvgap { 25 } { 4 \xi{8} }
\fontparams_new:nNnn { SuperscriptBottomMaxWithSubscript }
  \Umathsupsubbottommax { 26 } { 0.8 \abs{\sigma{5}} }
\fontparams_new:nNnn { SpaceAfterScript }
  \Umathspaceafterscript { 27 } { \scriptspace }
\fontparams_new:nNnn { UpperLimitGapMin }
  \Umathlimitabovevgap { 28 } { \xi{9} }
\fontparams_new:nNnn { UpperLimitBaselineRiseMin }
  \Umathlimitabovebgap { 29 } { \xi{11} }
\fontparams_new:nNnn { LowerLimitGapMin }
  \Umathlimitbelowvgap { 30 } { \xi{10} }
\fontparams_new:nNnn { LowerLimitBaselineDropMin }
  \Umathlimitbelowbgap { 31 } { \xi{12} }
\fontparams_new:nNnnnn
  { StackTopDisplayStyleShiftUp, StackTopShiftUp }
  \Umathstacknumup { 33 } { 32 } { \sigma{8} } { \sigma{10} }
\fontparams_new:nNnnnn
  { StackBottomDisplayStyleShiftDown, StackBottomShiftDown }
  \Umathstackdenomdown { 35 } { 34 } { \sigma{11} } { \sigma{12} }
\fontparams_new:nNnnnn { StackDisplayStyleGapMin, StackGapMin }
  \Umathstackvgap { 37 } { 36 } { 7 \xi{8} } { 3 \xi{8} }
\fontparams_new:nNnn { StretchStackTopShiftUp }
  \Umathoverdelimiterbgap { 38 } { \xi{11} }
\fontparams_new:nNnn { StretchStackBottomShiftDown }
  \Umathunderdelimiterbgap { 39 } { \xi{12} }
\fontparams_new:nNnn { StretchStackGapAboveMin }
  \Umathunderdelimitervgap { 40 } { \xi{10} }
\fontparams_new:nNnn { StretchStackGapBelowMin }
  \Umathoverdelimitervgap { 41 } { \xi{9} }
\fontparams_new:nNnnnn
  { FractionNumeratorDisplayStyleShiftUp,
    FractionNumeratorShiftUp }
  \Umathfractionnumup { 43 } { 42 } { \sigma{8} } { \sigma{9} }
\fontparams_new:nNnnnn
  { FractionDenominatorDisplayStyleShiftDown,
    FractionDenominatorShiftDown }
  \Umathfractiondenomdown { 45 } { 44 } { \sigma{11} } { \sigma{12} }
\fontparams_new:nNnnnn
  { FractionNumDisplayStyleGapMin, FractionNumeratorGapMin }
  \Umathfractionnumvgap { 47 } { 46 } { 3 \xi{8} } { \xi{8} }
\fontparams_new:nNnn { FractionRuleThickness }
  \Umathfractionrule { 48 } { \xi{8} }
\fontparams_new:nNnnnn
  { FractionDenomDisplayStyleGapMin, FractionDenominatorGapMin }
  \Umathfractiondenomvgap { 50 } { 49 } { 3 \xi{8} } { \xi{8} }
\fontparams_new:nn { SkewedFractionHorizontalGap } { 51 }
\fontparams_new:nn { SkewedFractionVerticalGap } { 52 }
\fontparams_new:nNnn { OverbarVerticalGap }
  \Umathoverbarvgap { 53 } { 3 \xi{8} }
\fontparams_new:nNnn { OverbarRuleThickness }
  \Umathoverbarrule { 54 } { \xi{8} }
\fontparams_new:nNnn { OverbarExtraAscender }
  \Umathoverbarkern { 55 } { \xi{8} }
\fontparams_new:nNnn { UnderbarVerticalGap }
  \Umathunderbarvgap { 56 } { 3 \xi{8} }
\fontparams_new:nNnn { UnderbarRuleThickness }
  \Umathunderbarrule { 57 } { \xi{8} }
\fontparams_new:nNnn { UnderbarExtraDescender }
  \Umathunderbarkern { 58 } { \xi{8} }
\fontparams_new:nNnnnn
  { RadicalDisplayStyleVerticalGap, RadicalVerticalGap }
  \Umathradicalvgap { 59 } { 60 }
  { \xi{8} + 0.25 \abs{\sigma{5}} } { \xi{8} + 0.25 \abs{\xi{8}} }
\fontparams_new:nNn { RadicalRuleThickness }
  \Umathradicalrule { 61 }
\fontparams_new:nNnn { RadicalExtraAscender }
  \Umathradicalkern { 62 } { \xi{8} }
\fontparams_new:nNn { RadicalKernBeforeDegree }
  \Umathradicaldegreebefore { 63 }
\fontparams_new:nNn { RadicalKernAfterDegree }
  \Umathradicaldegreeafter { 64 }
\fontparams_new_int:nNn { RadicalDegreeBottomRaisePercent }
  \Umathradicaldegreeraise { 65 }
\fontparams_new:nNnnnn
  { FractionDelimiterDisplaySize, FractionDelimiterSize }
  \Umathfractiondelsize { } { } { \sigma{20} } { \sigma{21} }
\fontparams_new:nNnn { }
  \Umathlimitabovekern { } { \xi{13} }
\fontparams_new:nNnn { }
  \Umathlimitbelowkern { } { \xi{13} }
\fontparams_new:nNnn { }
  \Umathquad { } { \sigma{6} }
\fontparams_new:nNnn { SubscriptShiftDownWithSuperscript }
  \Umathsubsupshiftdown { } { \sigma{17} }
\fontparams_new:nN { MinConnectorOverlap }
  \Umathconnectoroverlapmin
%    \end{macrocode}
%
% \subsection{The high-level interface}
%
%    \begin{macrocode}
\cs_new_nopar:Npn \FontParameter #1 #2 {
  \cs_if_exist:cTF { fontparams_get_ #1 :N } {
    \use:c { fontparams_get_ #1 :N } #2
  } {
    \msg_error:nnx { fontparams } { unknown-param } { #1 }
  }
}
\cs_new_protected_nopar:Npn \SetFontParameter #1 #2 #3 {
  \cs_if_exist:cTF { fontparams_set_ #1 :Nn } {
    \use:c { fontparams_set_ #1 :Nn } #2 { #3 }
  } {
    \cs_if_exist:cTF { fontparams_get_ #1 :N } {
      \msg_error:nnx { fontparams } { readonly-param } { #1 }
    } {
      \msg_error:nnx { fontparams } { unknown-param } { #1 }
    }
  }
}
%    \end{macrocode}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\msg_new:nnnn { fontparams } { unknown-style } {
  Unknown~ math~ style~ #1
} {
  Use~ one~ of:~
  \exp_not:n {
    \displaystyle,~ \crampeddisplaystyle,~
    \textstyle,~ \crampedtextstyle,~
    \scriptstyle,~ \crampedscriptstyle,~
    \scriptscriptstyle,~ \crampedscriptscriptstyle
  }
}
\msg_new:nnn { fontparams } { unknown-param } {
  Unknown~ font~ parameter~ #1
}
\msg_new:nnn { fontparams } { readonly-param } {
  Font~ parameter~ #1~ is~ read-only
}
%</package>
%    \end{macrocode}
%
% \Finale
\endinput
